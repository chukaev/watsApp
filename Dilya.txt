machine machine0 sees ctx0

variables user content chat active muted chatcontent contentchat owner

invariants
  @inv1 user ⊆ USER
  @inv2 content ⊆ CONTENT
  @inv3 chat ∈ user ↔ user // chat sessions
  @inv4 active ∈ user ⇸ user // active chat session
  @inv5 muted ∈ user ↔ user // muted sessions
  @inv6 active ⊆ chat // active chat sessions
  @inv7 muted ⊆ chat // muted chat sessions
  @inv8 chatcontent ∈ user ⇸ (user ⇸ ℙ(content)) // users' chat content
  @inv9 contentchat ∈ content → (user ↔ user)
  @inv10 owner ∈ content → user

events
  event INITIALISATION
    then
      @init1 user ≔  ∅
      @init2 content ≔ ∅
      @init3 chat ≔ ∅
      @init4 active ≔ ∅
      @init5 chatcontent ≔ ∅
      @init6 muted ≔ ∅
      @init7 contentchat ≔ ∅
      @init8 owner ≔ ∅
  end

  event create_chat_session
  /* US-01
     create new chat that does not exists */
    any u1 u2
    where
      @grd1 u1 ∈ user ∧  u2 ∈ user
      @grd2 u1 ↦ u2 ∉ chat
    then
      @act1 chat ≔ chat ∪ {u1 ↦ u2}
      //@act2 chatcontent ≔  chatcontent ∪ {u1 ↦ (chatcontent(u1) ∪ {u2 ↦ ∅} )}
  end

  event select_chat
  /* US-02
     select unactive existing chat */
    any u1 u2
    where
      @grd1 u1 ∈ user ∧ u2 ∈ user
      @grd2 u1 ↦ u2 ∈ chat
      @grd3 u1 ↦ u2 ∉ active
    then
      @act1 active ≔ ({u1} ⩤  active) ∪ {u1 ↦ u2}
  end

  event chatting1
  /* US-03
     send new content to existing active chat
     iff it not muted from both sides */
    any u1 u2 c
    where
      @grd1 u1 ∈ user ∧ u2 ∈ user
      @grd2 u1 ↦ u2 ∈ chat
      @grd3 u1 ↦ u2 ∈ active
      @grd4 c ∈ CONTENT ∖ content
      @grd5 u2 ↦ u1 ∉ muted
      @grd6 u1 ↦ u2 ∉ muted
      @grd7 u1 ∉  dom(chatcontent)
    then
      @act1 content ≔ content ∪ {c}
      @act2 chat ≔ chat ∪ {u2 ↦ u1}
      @act3 chatcontent ≔ chatcontent  {u1 ↦ {u2 ↦ {c}} }
      @act4 contentchat ≔  contentchat ∪ {c ↦ {u1 ↦u2, u2 ↦ u1 }}
      @act5 owner ≔  owner ∪ {c ↦ u1}
      //@act3 chatcontent ≔ chatcontent  {(u1 ↦ u2) ↦ (chatcontent(u1↦u2)∪{c}),
       //     (u2 ↦ u2) ↦ (chatcontent(u2↦u1)∪{c})}
  end


    event chatting2
  /* US-03
     send new content to existing active chat
     iff it not muted from both sides */
    any u1 u2 c
    where
      @grd1 u1 ∈ user ∧ u2 ∈ user
      @grd2 u1 ↦ u2 ∈ chat
      @grd3 u1 ↦ u2 ∈ active
      @grd4 c ∈ CONTENT ∖ content
      @grd5 u2 ↦ u1 ∉ muted
      @grd6 u1 ↦ u2 ∉ muted
      @grd7 u1 ∈ dom(chatcontent)
      @grd8 u2 ∉ dom(chatcontent(u1))
    then
      @act1 content ≔ content ∪ {c}
      @act2 chat ≔ chat ∪ {u2 ↦ u1}
      @act3 chatcontent ≔ chatcontent  {u1 ↦ (chatcontent(u1) ∪ {u2 ↦ {c}} )}
      @act4 contentchat ≔  contentchat ∪ {c ↦ {u1 ↦u2, u2 ↦ u1 }}
      @act5 owner ≔  owner ∪ {c ↦ u1}
      //@act3 chatcontent ≔ chatcontent  {(u1 ↦ u2) ↦ (chatcontent(u1↦u2)∪{c}),
       //     (u2 ↦ u2) ↦ (chatcontent(u2↦u1)∪{c})}
  end
      event chatting3
  /* US-03
     send new content to existing active chat
     iff it not muted from both sides */
    any u1 u2 c
    where
      @grd1 u1 ∈ user ∧ u2 ∈ user
      @grd2 u1 ↦ u2 ∈ chat
      @grd3 u1 ↦ u2 ∈ active
      @grd4 c ∈ CONTENT ∖ content
      @grd5 u2 ↦ u1 ∉ muted
      @grd6 u1 ↦ u2 ∉ muted
      @grd7 u1 ∈ dom(chatcontent)
      @grd8 u2 ∈ dom(chatcontent(u1))
    then
      @act1 content ≔ content ∪ {c}
      @act2 chat ≔ chat ∪ {u2 ↦ u1}
      @act3 chatcontent ≔ chatcontent  {u1 ↦ (chatcontent(u1)   {u2 ↦ (chatcontent(u1)(u2)∪ {c})} )}
      @act4 contentchat ≔  contentchat ∪ {c ↦ {u1 ↦u2, u2 ↦ u1 }}
      @act5 owner ≔  owner ∪ {c ↦ u1}
      //@act3 chatcontent ≔ chatcontent  {(u1 ↦ u2) ↦ (chatcontent(u1↦u2)∪{c}),
       //     (u2 ↦ u2) ↦ (chatcontent(u2↦u1)∪{c})}
  end


  event delete_content
  /* US-04
     delete existing content only from existing active chat u1 - reciever, u2 - sender */
    any u1 u2 c
    where
      @grd1 u1 ∈ user ∧ u2 ∈ user
      @grd2 u1 ↦ u2 ∈ chat
      @grd3 c ∈ content
      @grd4 u1 ↦ u2 ∈ active
      @grd5 u2 ∈ dom(chatcontent)
      @grd6 u1 ∈ dom(chatcontent(u2))
      @grd7 c ∈ chatcontent(u2)(u1)
      @grd8 u1 ↦ u2 ∈ contentchat(c)
    then
    @act1 contentchat(c) ≔ contentchat(c) ∖ {u1 ↦ u2}
    @act2 chatcontent(u2) ≔ chatcontent(u2)  {u1 ↦ (chatcontent(u2)(u1) ∖ { cc · c=cc ∧ (u2 ↦ u1)∉contentchat(cc) ∣ cc } )}
  end

  event delete_last_content
  /* US-04
     delete existing content only from existing active chat u1 - reciever, u2 - sender */
    any u1 u2 c
    where
      @grd1 u1 ∈ user ∧ u2 ∈ user
      @grd2 u1 ↦ u2 ∈ chat
      @grd3 c ∈ content
      @grd4 u1 ↦ u2 ∈ active
      @grd5 u2 ∈ dom(chatcontent)
      @grd6 u1 ∈ dom(chatcontent(u2))
      @grd7 c ∈ chatcontent(u2)(u1)
      @grd8 u1 ↦ u2 ∈ contentchat(c)
      @grd9 contentchat(c) ∖ {u1 ↦ u2} =  ∅
      @grd10 {u2} ⩤ chatcontent ⊆ user × (user ⇸ ℙ(content ∖ {c}))
      @grd11 {u1} ⩤ chatcontent(u2) ⊆ (user × ℙ(content ∖ {c}))
    then
    @act1 contentchat ≔ {c} ⩤ contentchat
    @act2 chatcontent(u2) ≔ chatcontent(u2)  {u1 ↦ (chatcontent(u2)(u1) ∖ {c} )}
  	@act3 owner ≔ {c} ⩤  owner
  	@act4 content ≔  content ∖ {c}
  end



  event remove_content
  /* US-04
      u1 - sender , u2 - reciever */
    any u1 u2 c
    where
      @grd1 u1 ∈ user ∧ u2 ∈ user
      @grd2 u1 ↦ u2 ∈ chat
      @grd3 c ∈ content
      @grd4 u1 ∈ dom(chatcontent)
      @grd5 u2 ∈ dom(chatcontent(u1))
      @grd6 u1 ↦ u2 ∈ active
      @grd7 c ∈ chatcontent(u1)(u2)
      @grd8 u1 ↦ u2 ∈ contentchat(c)
   then
    @act1 contentchat(c) ≔ contentchat(c) ∖ {u1 ↦ u2}
    @act2 chatcontent(u1) ≔ chatcontent(u1)  {u2 ↦ (chatcontent(u1)(u2) ∖ { cc · c=cc ∧ (u2 ↦ u1)∉contentchat(cc) ∣ cc } )}
  end


    event remove_last_content
    /* US-04
      u1 - sender , u2 - reciever */
    any u1 u2 c
    where
       @grd1 u1 ∈ user ∧ u2 ∈ user
      @grd2 u1 ↦ u2 ∈ chat
      @grd3 c ∈ content
      @grd4 u1 ∈ dom(chatcontent)
      @grd5 u2 ∈ dom(chatcontent(u1))
      @grd6 u1 ↦ u2 ∈ active
      @grd7 c ∈ chatcontent(u1)(u2)
      @grd8 u1 ↦ u2 ∈ contentchat(c)
      @grd9 contentchat(c) ∖ {u1 ↦ u2} =  ∅
      @grd10 {u1} ⩤ chatcontent ⊆ user × (user ⇸ ℙ(content ∖ {c}))
      @grd11 {u2} ⩤ chatcontent(u1) ⊆ (user × ℙ(content ∖ {c}))
    then
    @act1 contentchat ≔ {c} ⩤ contentchat
    @act2 chatcontent(u1) ≔ chatcontent(u1)  {u2 ↦ (chatcontent(u1)(u2) ∖ {c} )}
  	@act3 owner ≔ {c} ⩤  owner
  	@act4 content ≔  content ∖ {c}
  end

  event delete_chat_session
  /* US-05
     delete existing active chat session with all associated content
     associated content = chatcontent */
    any u1 u2
    where
      @grd1 u1 ∈ user ∧ u2 ∈ user
      @grd2 u1 ↦ u2 ∈ chat
      @grd3 u1 ↦ u2 ∈ active
    then
      @act1 chat ≔  chat ∖ {u1 ↦ u2}
      @act2 active ≔  active ∖ {u1 ↦ u2}
      @act3 muted ≔  muted ∖  {u1 ↦ u2}
   //   @act4 chatcontent ≔  chatcontent ∖ {(u1 ↦ u2) ↦ chatcontent(u1 ↦ u2)}
  end

  event mute_chat
  /* US-06
     mute existing chat */
    any u1 u2
    where
      @grd1 u1 ∈ user ∧ u2 ∈ user
      @grd2 u1 ↦ u2 ∈ chat
      @grd3 u1 ↦ u2 ∉ muted // prevent from trying to mute a previously muted chat
    then
      @act1 muted ≔  muted ∪  {u1 ↦ u2}
      @act2 active ≔     active ∖   {u1 ↦   u2}
  end

  event unmute_chat
  /* US-07
     unmute existing muted chat */
    any u1 u2
    where
      @grd1 u1 ∈ user ∧ u2 ∈ user
      @grd2 u1 ↦ u2 ∈ chat
      @grd3 u1 ↦ u2 ∈ muted
      @grd4 u1 ↦   u2 ∈ active
    then
      @act1 muted ≔  muted ∖  {u1 ↦ u2}
  end

  event broadcast
  /* US-08
     send existing or new one content only to existing unmuted chats */
    any u1 ul c
    where
      @grd1 u1 ∈ user ∧  ul ⊆ user
      @grd2 ({u1} × ul) ⊆ chat
      @grd3 ({u1} × ul) ∩ muted = ∅
      @grd4 (ul × {u1}) ∩ muted = ∅
      @grd5 c ∈ CONTENT∖ content
    then
      @act1 chat ≔ chat ∪ (ul × {u1})
      @act2 content ≔  content ∪  {c}
      @act3 owner ≔  owner ∪ {c ↦ u1}
      @act4 contentchat ≔  contentchat ∪{c ↦( ({u1}×ul) ∪ (ul×{u1}))}

      @act5 chatcontent ≔ chatcontent  {u1 ↦ { u · u ∈ ul ∣   u ↦ {c} ∪ {cc · cc ∈ content ∧ (u1 ↦ u) ∈ contentchat(cc) ∣ cc }  }}
  end

  event forward
  /* US-09
     Forward existed content to a group of users. */
    any u ul c
    where
      @grd1 u ∈ user
      @grd2 ul ⊂ user
      @grd3 ({u} × ul) ∩ muted = ∅
      @grd4 (ul × {u}) ∩ muted = ∅
      @grd5 c ∈ content
      //@grd6 ∃ ut · ut ∈ chat[{u}] ∧ c ∈ chatcontent(u↦ut)
    then
      @act1 chat ≔ chat ∪ (ul × {u}) ∪ ({u} × ul)
    //  @act2 chatcontent ≔ chatcontent  {uu · uu ∈ ({u}×ul)∪(ul×{u})∣ uu ↦ (chatcontent(uu)∪{c})}
  end

  event unselect_chat
  /* US-10
     remove chat from the list of active */
    any u1 u2
    where
      @grd1 u1 ∈ user ∧  u2 ∈ user
      @grd2 u1 ↦ u2 ∈ chat
      @grd3 u1 ↦ u2 ∈ active
    then
      @act1 active ≔ active ∖ {u1 ↦ u2}
  end
end
