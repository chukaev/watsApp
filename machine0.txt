machine machine0 sees ctx0

variables
  user
  content
  chat
  active
  muted
  chatcontent
  owner

invariants
  @inv1 user ⊆ USER
  @inv2 content ⊆ CONTENT
  @inv3 chat ∈ user ↔ user // chat sessions between users
  @inv4 active ∈ user ⇸ user // active chat sessions
  @inv5 muted ∈ user ↔ user // muted chat sessions
  @inv6 active ⊆ chat // active chat sessions is subset of all chat sessions
  @inv7 muted ⊆ chat // muted chat sessions is subset of all chat sessions
  @inv8 chatcontent ∈ user → ( content ⇸ ℙ(user × user) ) // content, that user send & that visible in chat sessions
  @inv9 owner ∈ content → user // for each content there is a single owner
  @inv10 active ∩ muted= ∅ // chat session cannot be muted and active at the same time

events
  event INITIALISATION
  begin
    @init1 user ≔  ∅
    @init2 content ≔ ∅
    @init3 chat ≔ ∅
    @init4 active ≔ ∅
    @init5 chatcontent ≔ ∅
    @init6 muted ≔ ∅
    @init7 owner ≔ ∅
  end

  event create_chat_session // US-01
  // create new chat that does not exists
  any u1 u2
  where
    @grd1 u1 ∈ user ∧ u2 ∈ user
    @grd2 u1 ↦ u2 ∉ chat
    @grd3 u1 ≠ u2
  then
    @act1 chat ≔ chat ∪ {u1 ↦ u2}
    @act2 active ≔ ({u1} ⩤  active) ∪ {u1 ↦ u2}
  end

  event select_chat // US-02
  // select unactive existing chat
  any u1 u2
  where
    @grd1 u1 ∈ user ∧ u2 ∈ user
    @grd2 u1 ↦ u2 ∈ chat
    @grd3 u1 ↦ u2 ∉ active
    @grd4 u1 ↦u2 ∉ muted
  then
    @act1 active ≔ ({u1} ⩤ active) ∪ {u1 ↦ u2}
  end

  event chatting // US-03
  // send new content to existing active chat
  // iff it not muted from both sides
  any u1 u2 c
  where
    @grd1 u1 ∈ user ∧ u2 ∈ user
    @grd2 u1 ↦ u2 ∈ chat
    @grd3 u1 ↦ u2 ∈ active
    @grd4 c ∈ CONTENT ∖ content
    @grd5 u2 ↦ u1 ∉ muted
    @grd6 u1 ↦ u2 ∉ muted
  then
    @act1 content ≔ content ∪ {c}
    @act2 owner ≔ owner ∪ {c ↦ u1}
    @act3 chat ≔ chat ∪ {u2 ↦ u1}
    @act4 chatcontent ≔ ({u1} ⩤ chatcontent) ∪ {u1 ↦ ({c ↦ {u2 ↦ u1, u1 ↦ u2}} ∪ chatcontent(u1) ) }
  end

  event delete_content // US-04a
  // delete existing content exchanged with another user from existing active chat
  // u1 is not the sender but the receiver of the conten
  any u1 u2 c
  where
    @grd1 u1 ∈ user ∧ u2 ∈ user
    @grd2 u1 ↦ u2 ∈ chat
    @grd3 c ∈ content
    @grd4 c ∈ dom(chatcontent(u2))
    @grd5 u1 ↦ u2 ∈ active
  then
    @act1 chatcontent ≔ ({u2} ⩤ chatcontent) ∪ {u2 ↦   (({c} ⩤ chatcontent(u2))∪ ({c ↦(chatcontent(u2)(c)∖{u1↦u2})}))}
    @act2 content ≔  content ∖ { cc · cc =c ∧ chatcontent ∈ user → (content∖{cc}⇸ ℙ(user×user)) ∣ cc}
    @act3 owner≔ owner  ∖ { cc · cc =c ∧ chatcontent ∈ user → (content∖{cc}⇸ ℙ(user×user)) ∣ cc ↦ owner(cc)}
  end

  event remove_content // US-04b
  // delete existing content exchanged with another user from existing active chat
  // u1 is the sender of the content
  any u1 u2 c
  where
    @grd1 u1 ∈ user ∧ u2 ∈ user
    @grd2 u1 ↦ u2 ∈ chat
    @grd3 c ∈ content
    @grd4 c ∈ dom(chatcontent(u1))
    @grd5 u1 ↦ u2 ∈ active
    @grd6 u1↦u2 ∈ chatcontent(u1)(c)
  then
    @act1 chatcontent ≔ ({u1} ⩤ chatcontent) ∪ {u1 ↦   (({c} ⩤ chatcontent(u1))∪ ({c ↦(chatcontent(u1)(c)∖{u1↦u2})}))}
    @act2 content ≔  content ∖ { cc · cc =c ∧ chatcontent ∈ user → (content∖{cc}⇸ ℙ(user×user)) ∣ cc}
    @act3 owner≔ owner  ∖ { cc · cc =c ∧ chatcontent ∈ user → (content∖{cc}⇸ ℙ(user×user)) ∣ cc ↦ owner(cc)}
  end

  event delete_chat_session // US-05
  // delete existing active chat session with all associated content
  // associated content = chatcontent
  any u1 u2
  where
    @grd1 u1 ∈ user ∧ u2 ∈ user
    @grd2 u1 ↦ u2 ∈ chat
    @grd3 u1 ↦ u2 ∈ active
  then
    @act1 chat ≔  chat ∖ {u1 ↦ u2}
    @act2 active ≔  active ∖ {u1 ↦ u2}
    @act3 muted ≔  muted ∖  {u1 ↦   u2}
    @act4 chatcontent ≔ (chatcontent  {u1 ↦
    ({ cc · cc ∈ dom(chatcontent(u1)) ∧ chatcontent(u1)(cc) ∖{u1↦u2} =∅ ∣ cc}  ⩤ chatcontent(u1))
      {cc · cc  ∈ dom(chatcontent(u1)) ∧ u1↦u2 ∈ chatcontent(u1)(cc) ∣
     cc ↦ (chatcontent(u1)(cc)∖ {u1↦u2}) } } )
      {u2 ↦
    ({ cc · cc ∈ dom(chatcontent(u2)) ∧ chatcontent(u2)(cc) ∖{u1↦u2} =∅ ∣ cc}  ⩤ chatcontent(u2))
      {cc · cc  ∈ dom(chatcontent(u2)) ∧ u1↦u2 ∈ chatcontent(u2)(cc) ∣
     cc ↦ (chatcontent(u2)(cc)∖ {u1↦u2}) } }
     @act5 content ≔  content ∖ { cc · cc ∈content  ∧ chatcontent ∈ user → (content∖{cc}⇸ ℙ(user×user)) ∣ cc}
     @act6 owner≔ owner  ∖ { cc · cc ∈content  ∧ chatcontent ∈ user → (content∖{cc}⇸ ℙ(user×user)) ∣  cc ↦ owner(cc)}
  end

  event mute_chat // US-06
  // mute existing chat
  any u1 u2
  where
    @grd1 u1 ∈ user ∧ u2 ∈ user
    @grd2 u1 ↦ u2 ∈ chat
    @grd3 u1 ↦ u2 ∉ muted //prevent from trying to mute a previously muted chat
  then
    @act1 muted ≔  muted ∪  {u1 ↦ u2}
    @act2 active ≔ active ∖ {u1 ↦   u2}
  end

  event unmute_chat  // US-07
  // unmute existing muted chat
  any u1 u2
  where
    @grd1 u1 ∈ user ∧ u2 ∈ user
    @grd2 u1 ↦ u2 ∈ chat
    @grd3 u1 ↦ u2 ∈ muted
  then
    @act1 muted ≔  muted ∖  {u1 ↦ u2}
  end

  event broadcast1  // US-08
  // send existing or new one content only to existing unmuted chats
  // content is u1's
  any u1 ul c
  where
    @grd1 u1 ∈ user ∧  ul ⊆ user
    @grd2 ({u1} × ul) ⊆ chat
    @grd3 ({u1} × ul) ∩ muted = ∅
    @grd4 (ul × {u1}) ∩ muted = ∅
    @grd5 c ∈ content
    @grd6 c ∈ dom(chatcontent(u1))
  then
    @act1 chat ≔ chat ∪ (ul × {u1})
    @act2 chatcontent(u1) ≔ chatcontent(u1)   {c ↦(chatcontent(u1)(c) ∪ ((ul×{u1}) ∪ ({u1}×ul)) )}
  end

    event broadcast2  // US-08
  // send existing or new one content only to existing unmuted chats
  // contents is not u1's
  any u1 ul c
  where
    @grd1 u1 ∈ user ∧  ul ⊆ user
    @grd2 ({u1} × ul) ⊆ chat
    @grd3 ({u1} × ul) ∩ muted = ∅
    @grd4 (ul × {u1}) ∩ muted = ∅
    @grd5 c ∈ CONTENT
    @grd6 c ∉ dom(chatcontent(u1))

  then
    @act1 chat ≔ chat ∪ (ul × {u1})
    @act2 content ≔  content ∪  {c}
    @act3 chatcontent(u1) ≔ chatcontent(u1) ∪ {c ↦((ul×{u1}) ∪ ({u1}×ul))}
    @act4 owner ≔  {c ↦ u1}  owner
  end

  event forward1 // US-09
  // Forward existed content to a group of users.
  // c is not u's
  any u ul c
  where
    @grd1 u ∈ user
    @grd2 ul ⊂ user
    @grd3 ({u} × ul) ∩ muted = ∅
    @grd4 (ul × {u}) ∩ muted = ∅
    @grd5 c ∈ content
    @grd6 c ∉ dom(chatcontent(u))
  then
    @act1 chat ≔ chat ∪ (ul × {u}) ∪ ({u} × ul)
    @act3 chatcontent(u) ≔ chatcontent(u) ∪ {c ↦((ul×{u}) ∪ ({u}×ul)) }
  end

  event forward2 // US-09
  // Forward existed content to a group of users.
  // content is u's
  any u ul c
  where
    @grd1 u ∈ user
    @grd2 ul ⊂ user
    @grd3 ({u} × ul) ∩ muted = ∅
    @grd4 (ul × {u}) ∩ muted = ∅
    @grd5 c ∈ content
    @grd6 c ∈ dom(chatcontent(u))
  then
    @act1 chat ≔ chat ∪ (ul × {u}) ∪ ({u} × ul)
    @act2 chatcontent(u) ≔ ({c}⩤chatcontent(u)) ∪ {c ↦(chatcontent(u)(c) ∪ ((ul×{u}) ∪ ({u}×ul)) ) }
  end


  event unselect_chat // US-10
  // remove chat from the list of active
  any u1 u2
  where
    @grd1 u1 ∈ user ∧  u2 ∈ user
    @grd2 u1 ↦ u2 ∈ chat
    @grd3 u1 ↦ u2 ∈ active
  then
    @act1 active ≔ active ∖ {u1 ↦ u2}
  end
end